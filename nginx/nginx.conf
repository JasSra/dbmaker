events {
    worker_connections 1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;
    
    # Rate limiting for API endpoints
    limit_req_zone $binary_remote_addr zone=api:10m rate=100r/s;
    
    # Map to handle subdomain routing
    map $host $backend_pool {
        default console;
        ~^console\.mydomain\.com$ console;
        ~^(?<user_container>.+)\.mydomain\.com$ container;
    }
    
    # Upstream for console (Angular frontend)
    upstream console {
        server host.docker.internal:4200;  # Angular dev server
    }
    
    # Upstream for API
    upstream api {
        server host.docker.internal:5000;  # .NET API
    }
    
    # Dynamic upstream for containers
    map $host $container_port {
        default 10000;
        # This would be dynamically populated by the container orchestrator
        # Format: ~^user1-redis-cache\.mydomain\.com$ 10001;
        include /etc/nginx/conf.d/dynamic-upstreams.conf;
    }
    
    # Main server block for console.mydomain.com (Angular frontend)
    server {
        listen 80;
        server_name console.mydomain.com;
        
        # Security headers
        add_header X-Frame-Options DENY;
        add_header X-Content-Type-Options nosniff;
        add_header X-XSS-Protection "1; mode=block";
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
        
        # Serve Angular app
        location / {
            proxy_pass http://console;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Handle Angular routing
            try_files $uri $uri/ /index.html;
        }
        
        # API proxy
        location /api/ {
            limit_req zone=api burst=20 nodelay;
            
            proxy_pass http://api;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # CORS headers
            add_header Access-Control-Allow-Origin "https://console.mydomain.com" always;
            add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
            add_header Access-Control-Allow-Headers "Authorization, Content-Type, Accept" always;
            add_header Access-Control-Allow-Credentials true always;
            
            # Handle preflight requests
            if ($request_method = 'OPTIONS') {
                return 200;
            }
        }
        
        # Server-Sent Events for monitoring
        location /api/monitoring/events {
            proxy_pass http://api;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header Connection '';
            proxy_http_version 1.1;
            chunked_transfer_encoding off;
            proxy_buffering off;
            proxy_cache off;
        }
    }
    
    # Server block for container subdomains (database access)
    server {
        listen 80;
        server_name ~^(?<subdomain>.+)\.mydomain\.com$;
        
        # Only allow specific subdomain patterns
        if ($subdomain !~ "^[a-zA-Z0-9]+-[a-zA-Z0-9]+-[a-zA-Z0-9]+$") {
            return 404;
        }
        
        # Security headers for database access
        add_header X-Frame-Options DENY;
        add_header X-Content-Type-Options nosniff;
        
        # Rate limiting for database connections
        limit_req zone=api burst=10 nodelay;
        
        # Proxy to the appropriate container port
        location / {
            # Use resolver for dynamic DNS
            resolver 127.0.0.11 valid=30s;
            
            # Extract container info from subdomain
            set $container_target "";
            
            # This would be populated by the container orchestrator
            # For now, we'll use a simple port mapping
            if ($subdomain ~ "^(.+)-redis-(.+)$") {
                set $container_target "host.docker.internal:$container_port";
            }
            if ($subdomain ~ "^(.+)-postgres-(.+)$") {
                set $container_target "host.docker.internal:$container_port";
            }
            
            proxy_pass http://$container_target;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Increase timeouts for database connections
            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
        }
    }
    
    # Default server (catch-all)
    server {
        listen 80 default_server;
        server_name _;
        return 444;  # Close connection without response
    }
    
    # Health check endpoint
    server {
        listen 8080;
        server_name localhost;
        
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }
    }
}
